services:
  # To run tests and the main build
  app-run:
    build:
      context: .
      dockerfile: Dockerfile.run
    image: esd:run # It's good practice to also name images for other services
    depends_on:
      - python_publisher

  # Container to generate synthetic data
  python_publisher:
    build:
      context: . # Build context is the current directory
      dockerfile: Dockerfile.python # Use the Python Dockerfile
    image: esd-python_publisher # ADD THIS LINE or ensure it matches the name Docker uses
    container_name: GAN_generator
    ports:
      - "5556:5556"
    networks:
      - app_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1 
              capabilities: [gpu]

  # To program the inside docker
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: esd:dev # It's good practice to also name images for other services
    container_name: dev_environment
    command: ["tail", "-f", "/dev/null"]
    volumes:
      - ./test:/app/test
      - ./docs:/app/docs
      - ./libs:/app/libs
      - ./src:/app/src
      - ./include:/app/include
      - ./CMakeLists.txt:/app/CMakeLists.txt
      - ./README.md:/app/README.md
    depends_on:
      - python_publisher
    ports:
      - "5558:5558"
    networks:
        - app_network

  app-main:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: esd:main # This was in your original, which is good
    container_name: cpp_data_server
    depends_on:
      - python_publisher
    command: ["./bin/hello"]
    ports:
      - "5558:5558"
    networks:
        - app_network

  python-gui-client:
    build:
      context: .
      # Ensure this points to your Dockerfile that includes X11, xauth, AND Wayland libs
      dockerfile: Dockerfile.gui 
    image: esd:gui_client_wayland # Optional: new image name
    container_name: python_gui_display_wayland # Matching container name from your error logs
    depends_on:
      - app-main 
      - live-predictor # Add dependency on the predictor
    environment:
      # For X11/XWayland
      - DISPLAY=${DISPLAY} 
      # For native Wayland applications (and XWayland context)
      - WAYLAND_DISPLAY=${WAYLAND_DISPLAY}
      - XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR}
      # Hint for GTK-based backends (Tkinter might use parts of GTK for theming/rendering)
      # Prioritizes Wayland but allows X11 (XWayland) fallback.
      - GDK_BACKEND=wayland,x11 
    volumes:
      # For X11/XWayland communication
      - /tmp/.X11-unix:/tmp/.X11-unix:rw 
      # For native Wayland communication
      - ${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}:${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}:rw
      # Mount the parent XDG_RUNTIME_DIR as well, as some Wayland resources might be there
      - ${XDG_RUNTIME_DIR}:${XDG_RUNTIME_DIR}:rw
    networks:
      - app_network

  live-predictor: # New service for the live predictor
    build:
      context: .
      dockerfile: Dockerfile.predictor # Use the new Dockerfile
    image: esd-live-predictor # Give it a unique image name
    container_name: live_data_predictor
    depends_on:
      - python_publisher # Depends on the data generator
    networks:
      - app_network
    ports:
      - "5559:5559" # Exposes predictor's stats port
# Define the network for inter-container communication
networks:
  app_network:
    driver: bridge # Default network driver

